diff --git oldsrc/emu/inputdev.cpp src/emu/inputdev.cpp
index 600b10f13f5..c64a8e035c8 100644
--- oldsrc/emu/inputdev.cpp
+++ src/emu/inputdev.cpp
@@ -84,8 +84,8 @@ public:
 //**************************************************************************
 
 // standard joystick mappings
-const char          input_class_joystick::map_8way[] = "7778...4445";
-const char          input_class_joystick::map_4way_diagonal[] = "4444s8888..444458888.444555888.ss5.222555666.222256666.2222s6666.2222s6666";
+const char          input_class_joystick::map_8way[] = "778..445";
+const char          input_class_joystick::map_4way_diagonal[] = "444s888.444s888.4445888.ss555ss.2225666.222s666.222s666";
 // const char          input_class_joystick::map_4way_sticky[] = "s8.4s8.44s8.4445";
 
 
@@ -101,7 +101,7 @@ joystick_map::joystick_map()
 	: m_lastmap(JOYSTICK_MAP_NEUTRAL)
 {
 	// parse the standard 8-way map as default
-	parse(input_class_joystick::map_8way);
+       parse(input_class_joystick::map_8way);
 }
 
 
@@ -113,22 +113,21 @@ bool joystick_map::parse(const char *mapstring)
 {
 	// save a copy of the original string
 	m_origstring = mapstring;
-
 	// iterate over rows
-	for (int rownum = 0; rownum < 9; rownum++)
+	for (int rownum = 0; rownum < 7; rownum++)
 	{
 		// if we're done, copy from another row
 		if (*mapstring == 0 || *mapstring == '.')
 		{
-			bool symmetric = (rownum >= 5 && *mapstring == 0);
-			const u8 *srcrow = &m_map[symmetric ? (8 - rownum) : (rownum - 1)][0];
+			bool symmetric = (rownum >= 4 && *mapstring == 0);
+			const u8 *srcrow = &m_map[symmetric ? (6 - rownum) : (rownum - 1)][0];
 
 			// if this is row 0, we don't have a source row -- invalid
 			if (rownum == 0)
 				return false;
 
 			// copy from the srcrow, applying up/down symmetry if in the bottom half
-			for (int colnum = 0; colnum < 9; colnum++)
+			for (int colnum = 0; colnum < 7; colnum++)
 			{
 				u8 val = srcrow[colnum];
 				if (symmetric)
@@ -140,13 +139,13 @@ bool joystick_map::parse(const char *mapstring)
 		// otherwise, parse this column
 		else
 		{
-			for (int colnum = 0; colnum < 9; colnum++)
+			for (int colnum = 0; colnum < 7; colnum++)
 			{
 				// if we're at the end of row, copy previous to the middle, then apply left/right symmetry
 				if (colnum > 0 && (*mapstring == 0 || *mapstring == '.'))
 				{
-					bool symmetric = (colnum >= 5);
-					u8 val = m_map[rownum][symmetric ? (8 - colnum) : (colnum - 1)];
+					bool symmetric = (colnum >= 4);
+					u8 val = m_map[rownum][symmetric ? (6 - colnum) : (colnum - 1)];
 					if (symmetric)
 						val = (val & (JOYSTICK_MAP_UP | JOYSTICK_MAP_DOWN)) | ((val & JOYSTICK_MAP_LEFT) << 1) | ((val & JOYSTICK_MAP_RIGHT) >> 1);
 					m_map[rownum][colnum] = val;
@@ -228,9 +227,9 @@ std::string joystick_map::to_string() const
 
 u8 joystick_map::update(s32 xaxisval, s32 yaxisval)
 {
-	// now map the X and Y axes to a 9x9 grid using the raw values
-	xaxisval = ((xaxisval - INPUT_ABSOLUTE_MIN) * 9) / (INPUT_ABSOLUTE_MAX - INPUT_ABSOLUTE_MIN + 1);
-	yaxisval = ((yaxisval - INPUT_ABSOLUTE_MIN) * 9) / (INPUT_ABSOLUTE_MAX - INPUT_ABSOLUTE_MIN + 1);
+	// now map the X and Y axes to a 7x7 grid using the raw values
+	xaxisval = ((xaxisval - INPUT_ABSOLUTE_MIN) * 7) / (INPUT_ABSOLUTE_MAX - INPUT_ABSOLUTE_MIN + 1);
+	yaxisval = ((yaxisval - INPUT_ABSOLUTE_MIN) * 7) / (INPUT_ABSOLUTE_MAX - INPUT_ABSOLUTE_MIN + 1);
 	u8 mapval = m_map[yaxisval][xaxisval];
 
 	// handle stickiness
@@ -415,8 +414,7 @@ input_device_joystick::input_device_joystick(input_manager &manager, const char
 	// get the default joystick map
 	const char *mapstring = machine().options().joystick_map();
 	if (mapstring[0] == 0 || strcmp(mapstring, "auto") == 0)
-		mapstring = input_class_joystick::map_8way;
-
+	    mapstring = input_class_joystick::map_8way;
 	// parse it
 	if (!m_joymap.parse(mapstring))
 	{
diff --git oldsrc/emu/inputdev.h src/emu/inputdev.h
index 1c8e12c4b38..54b53e17c0e 100644
--- oldsrc/emu/inputdev.h
+++ src/emu/inputdev.h
@@ -76,7 +76,7 @@ private:
 	}
 
 	// internal state
-	u8                      m_map[9][9];            // 9x9 grid
+	u8                      m_map[7][7];            // 7x7 grid
 	u8                      m_lastmap;              // last value returned (for sticky tracking)
 	std::string             m_origstring;           // originally parsed string
 };
